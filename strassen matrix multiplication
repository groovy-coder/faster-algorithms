#include <stdio.h>
#include <stdlib.h>

// Allocate memory for a square matrix
int** allocateMatrix(int size) {
    int** matrix = (int**)malloc(size * sizeof(int*));
    for (int i = 0; i < size; i++)
        matrix[i] = (int*)calloc(size, sizeof(int));
    return matrix;
}

// Free memory of a matrix
void freeMatrix(int** matrix, int size) {
    for (int i = 0; i < size; i++)
        free(matrix[i]);
    free(matrix);
}

// Add two matrices
void addMatrix(int** A, int** B, int** result, int size) {
    for (int i = 0; i < size; i++)
        for (int j = 0; j < size; j++)
            result[i][j] = A[i][j] + B[i][j];
}

// Subtract two matrices
void subMatrix(int** A, int** B, int** result, int size) {
    for (int i = 0; i < size; i++)
        for (int j = 0; j < size; j++)
            result[i][j] = A[i][j] - B[i][j];
}

// Strassen recursive multiplication
void strassen(int** A, int** B, int** C, int size) {
    if (size == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    int newSize = size / 2;

    // Allocate memory for submatrices
    int** A11 = allocateMatrix(newSize);
    int** A12 = allocateMatrix(newSize);
    int** A21 = allocateMatrix(newSize);
    int** A22 = allocateMatrix(newSize);
    int** B11 = allocateMatrix(newSize);
    int** B12 = allocateMatrix(newSize);
    int** B21 = allocateMatrix(newSize);
    int** B22 = allocateMatrix(newSize);

    int** M1 = allocateMatrix(newSize);
    int** M2 = allocateMatrix(newSize);
    int** M3 = allocateMatrix(newSize);
    int** M4 = allocateMatrix(newSize);
    int** M5 = allocateMatrix(newSize);
    int** M6 = allocateMatrix(newSize);
    int** M7 = allocateMatrix(newSize);

    int** AResult = allocateMatrix(newSize);
    int** BResult = allocateMatrix(newSize);

    // Split A and B into submatrices
    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + newSize];
            A21[i][j] = A[i + newSize][j];
            A22[i][j] = A[i + newSize][j + newSize];

            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + newSize];
            B21[i][j] = B[i + newSize][j];
            B22[i][j] = B[i + newSize][j + newSize];
        }
    }

    // M1 = (A11 + A22) * (B11 + B22)
    addMatrix(A11, A22, AResult, newSize);
    addMatrix(B11, B22, BResult, newSize);
    strassen(AResult, BResult, M1, newSize);

    // M2 = (A21 + A22) * B11
    addMatrix(A21, A22, AResult, newSize);
    strassen(AResult, B11, M2, newSize);

    // M3 = A11 * (B12 - B22)
    subMatrix(B12, B22, BResult, newSize);
    strassen(A11, BResult, M3, newSize);

    // M4 = A22 * (B21 - B11)
    subMatrix(B21, B11, BResult, newSize);
    strassen(A22, BResult, M4, newSize);

    // M5 = (A11 + A12) * B22
    addMatrix(A11, A12, AResult, newSize);
    strassen(AResult, B22, M5, newSize);

    // M6 = (A21 - A11) * (B11 + B12)
    subMatrix(A21, A11, AResult, newSize);
    addMatrix(B11, B12, BResult, newSize);
    strassen(AResult, BResult, M6, newSize);

    // M7 = (A12 - A22) * (B21 + B22)
    subMatrix(A12, A22, AResult, newSize);
    addMatrix(B21, B22, BResult, newSize);
    strassen(AResult, BResult, M7, newSize);

    // C11 = M1 + M4 - M5 + M7
    addMatrix(M1, M4, AResult, newSize);
    subMatrix(AResult, M5, BResult, newSize);
    addMatrix(BResult, M7, C, newSize);

    // C12 = M3 + M5
    addMatrix(M3, M5, C, newSize);
    for (int i = 0; i < newSize; i++)
        for (int j = 0; j < newSize; j++)
            C[i][j + newSize] = C[i][j];

    // C21 = M2 + M4
    addMatrix(M2, M4, C, newSize);
    for (int i = 0; i < newSize; i++)
        for (int j = 0; j < newSize; j++)
            C[i + newSize][j] = C[i][j];

    // C22 = M1 - M2 + M3 + M6
    subMatrix(M1, M2, AResult, newSize);
    addMatrix(AResult, M3, BResult, newSize);
    addMatrix(BResult, M6, C, newSize);
    for (int i = 0; i < newSize; i++)
        for (int j = 0; j < newSize; j++)
            C[i + newSize][j + newSize] = C[i][j];

    // Free all allocated memory
    freeMatrix(A11, newSize); freeMatrix(A12, newSize);
    freeMatrix(A21, newSize); freeMatrix(A22, newSize);
    freeMatrix(B11, newSize); freeMatrix(B12, newSize);
    freeMatrix(B21, newSize); freeMatrix(B22, newSize);
    freeMatrix(M1, newSize); freeMatrix(M2, newSize); freeMatrix(M3, newSize);
    freeMatrix(M4, newSize); freeMatrix(M5, newSize); freeMatrix(M6, newSize); freeMatrix(M7, newSize);
    freeMatrix(AResult, newSize); freeMatrix(BResult, newSize);
}

// Print matrix
void printMatrix(int** matrix, int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++)
            printf("%4d ", matrix[i][j]);
        printf("\n");
    }
}

int main() {
    int n = 4; // matrix size (must be a power of 2)

    int** A = allocateMatrix(n);
    int** B = allocateMatrix(n);
    int** C = allocateMatrix(n);

    // Sample data
    int count = 1;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++) {
            A[i][j] = count;
            B[i][j] = count;
            count++;
        }

    printf("Matrix A:\n");
    printMatrix(A, n);
    printf("\nMatrix B:\n");
    printMatrix(B, n);

    strassen(A, B, C, n);

    printf("\nResult Matrix C (A * B):\n");
    printMatrix(C, n);

    // Free memory
    freeMatrix(A, n);
    freeMatrix(B, n);
    freeMatrix(C, n);

    return 0;
}
